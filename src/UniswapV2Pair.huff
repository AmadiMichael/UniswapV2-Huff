/// @title UniswapV2Pair
/// @notice SPDX-License-Identifier: MIT
/// @author AmadiMichael <https://github.com/AmadiMichael>
/// @notice UniswapV2Pair contract implementation in Huff
/// @notice Adapted from UniswapV2 (https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair)


/// @notice `returndatasize` and `callvalue` are used to push zero to the stack in some instances below (saves one gas per push)
/// @notice `callvalue` is used in cases where an external call that returns data has been made earlier which will make `returndatasize` return a non-zero value
/// @notice `callvalue` is safe to use here because no function here is payable which means `callvalue` will always push 0x00 to the stack

#include "./libraries/UQ112x112.huff"
#include "./libraries/ReentrancyGuard.huff"
#include "./libraries/SafeMath.huff"
#include "./libraries/SafeTransfer.huff"
#include "./libraries/Errors.huff"
#include "./ERC20.huff"


// Define Interface
#define function MINIMUM_LIQUIDITY() pure returns (uint256)
#define function burn(address) nonpayable returns (uint256, uint256)
#define function factory() view returns (address)
#define function getReserves() view returns (uint112, uint112, uint32)
#define function initialize(address,address) nonpayable returns ()
#define function kLast() view returns (uint256)
#define function mint(address) nonpayable returns (uint256)
#define function price0CumulativeLast() view returns (uint256)
#define function price1CumulativeLast() view returns (uint256)
#define function skim(address) nonpayable returns ()
#define function swap(uint256,uint256,address,bytes) nonpayable returns ()
#define function sync() nonpayable returns ()
#define function token0() view returns (address)
#define function token1() view returns (address)


// storage
#define constant _FACTORY = FREE_STORAGE_POINTER()
#define constant _TOKEN0 = FREE_STORAGE_POINTER()
#define constant _TOKEN1 = FREE_STORAGE_POINTER()
#define constant PACKED_RESERVE_INFO = FREE_STORAGE_POINTER()
#define constant _PRICE0_CUMULATIVE_LAST = FREE_STORAGE_POINTER()
#define constant _PRICE1_CUMULATIVE_LAST = FREE_STORAGE_POINTER()
#define constant _K_LAST = FREE_STORAGE_POINTER()


// constants
#define constant OneToPower6 = 0xf4240
#define constant __UINT112_MAX = 0xffffffffffffffffffffffffffff
#define constant _MINIMUM_LIQUIDITY = 0x3e8
#define constant SELECTOR = 0xa9059cbb
// offsets
// #define constant RESERVE0_OFFSET = 0x00
#define constant RESERVE1_OFFSET = 0x70
#define constant BLOCK_TIMESTAMP_LAST_OFFSET = 0xe0

// ERRORS
#define error FORBIDDEN()
#define error UNISWAPV2CALL_FAILED()
#define error INSUFFICIENT_OUTPUT_AMOUNT()
#define error INSUFFICIENT_LIQUIDITY()
#define error INVALID_TO()
#define error INSUFFICIENT_INPUT_AMOUNT()
#define error INVALID_K()
#define error INSUFFICIENT_LIQUIDITY_MINTED()
#define error OVERFLOW()
#define error INSUFFICIENT_LIQUIDITY_BURNED()
#define error LOCKED()

// EVENTS
#define event Mint(address indexed sender, uint amount0, uint amount1)
#define event Burn(address indexed sender, uint amount0, uint amount1, address indexed to)
#define event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    )
#define event Sync(uint112 reserve0, uint112 reserve1)


// functions
#define macro MINIMUM_LIQUIDITY() = takes (0) returns (0) {
    [_MINIMUM_LIQUIDITY] returndatasize mstore
    0x20 returndatasize return
}

// Burn function
#define macro BURN() = takes (0) returns (0) {
    // require no ether is sent, revert otherwise
    NON_PAYABLE()
    // set reentrancy lock to true
    LOCK()

    // get address(this) balance in token0 and token1
    GET_BALANCE_OF()                            // [token0Balance, token1Balance]
    _GET_RESERVES()                             // [reserve0, reserve1, token0Balance, token1Balance]

    // get balanceOf(address(this)) ie liquidity sent to be burnt
    address                                     // [account, reserve0, reserve1, token0Balance, token1Balance]
    [BALANCE_SLOT] LOAD_ELEMENT_FROM_KEYS(callvalue) // [liquidity, reserve0, reserve1, token0Balance, token1Balance]

    // arrange the stack and call MINT_FEE() then load totalSupply slot
    dup3 dup3 MINT_FEE()                        // [feeOn, liquidity, reserve0, reserve1, token0Balance, token1Balance]
    [TOTAL_SUPPLY_SLOT] sload                   // [totalSupply, feeOn, liquidity, reserve0, reserve1, token0Balance, token1Balance]

    // prepare stack to calculate amount of token0 and token1 to send to `to` address from calldata
    swap6 swap1 swap5                           // [token0Balance, token1Balance, liquidity, reserve0, reserve1, feeOn, totalSupply]
    dup7 swap1 dup4                             // [liquidity, token0balance, totalSupply, token1Balance, liquidity, reserve0, reserve1, feeOn, totalSupply]

    // calculate amount of token0 and token1 to send to `to` address
    SAFE_MUL() SAFE_DIV()                       // [amount0, token1Balance, liquidity, reserve0, reserve1, feeOn, totalSupply]
    swap6 swap1 dup3                            // [liquidity, token1Balance, totalSupply, liquidity, reserve0, reserve1, feeOn, amount0]
    SAFE_MUL() SAFE_DIV()                       // [amount1, liquidity, reserve0, reserve1, feeOn, amount0]

    // revert with INSUFFICIENT_LIQUIDITY_BURNED if either of amount0 or amount1 to sent to LP is zero
    dup1 iszero revert_insufficient_lp_burn jumpi
    dup6 iszero revert_insufficient_lp_burn jumpi

    // Burn the liquidity tokens from address(this) balance and use SAFE_TRANSFER Ffrom huffmate to safely send token0 and token1 to `to` address
    swap1 address swap1 _BURN()                 // [amount1 resevre0 reserve1, feeOn, amount0]
    [_TOKEN0] sload dup6 0x04 calldataload      // [to, amount, token0, amount1 resevre0 reserve1, feeOn, amount0]
    SAFE_TRANSFER(callvalue)                         // [amount1 resevre0 reserve1, feeOn, amount0]
    [_TOKEN1] sload dup2 0x04 calldataload      // [to, amount, token1, amount1 resevre0 reserve1, feeOn, amount0]
    SAFE_TRANSFER(callvalue)                         // [amount1 resevre0 reserve1, feeOn, amount0]

    // get the new balanceOf to be used to call UPDATE()
    GET_BALANCE_OF()                            // [token0Balance, token1Balance, amount1 resevre0 reserve1, feeOn, amount0]

    // arrange the stack and call UPDATE()
    dup4 dup6                                   // [reserve1, resevre0, token0Balance, token1Balance, amount1 resevre0 reserve1, feeOn, amount0]
    swap3 swap1                                 // [resevre0, token1Balance, token0Balance, reserve1, amount1 resevre0 reserve1, feeOn, amount0]
    swap2                                       // [token0Balance, token1Balance, reserve0, reserve1, amount1 resevre0 reserve1, feeOn, amount0]
    UPDATE()                                    // [amount1 resevre0 reserve1, feeOn, amount0]

    // If feeOn returns true (1 and above) update KLAST by setting it to be the product of the updated reserves then jump to emit burn event else only jump to emit burn event
    swap3 iszero BURN_emitevent jumpi           // [resevre0 reserve1, amount1, amount0]
    _GET_RESERVES() SAFE_MUL() [_K_LAST] sstore // [resevre0 reserve1, amount1, amount0]
    BURN_emitevent jump

    revert_insufficient_lp_burn:
      __ERROR(INSUFFICIENT_LIQUIDITY_BURNED) callvalue mstore
      0x04 callvalue revert

    // emits burn event with indexed and non indexed topics and parameters
    BURN_emitevent:                             // [resevre0 reserve1, amount1, amount0]
        dup4 callvalue mstore                        // [resevre0 reserve1, amount1, amount0]
        dup3 0x20 mstore                        // [resevre0 reserve1, amount1, amount0]
        0x04 calldataload                       // [to, resevre0 reserve1, amount1, amount0]
        caller                                  // [sender, to, resevre0 reserve1, amount1, amount0]
        __EVENT_HASH(Burn)                      // [eventsig, sender, to, resevre0 reserve1, amount1, amount0]
        0x40 callvalue log3                          // [resevre0 reserve1, amount1, amount0]
        
        swap3 callvalue mstore                       // [ reserve1, amount1, resevre0]
        swap1 0x20 mstore                       // [reserve1, resevre0]

        // unlock reentrancy lock
        UNLOCK()
        
        0x40 callvalue return
}

#define macro FACTORY() = takes (0) returns (0) {
    [_FACTORY] sload       
    returndatasize mstore
    0x20 returndatasize return
}

#define macro GET_RESERVES() = takes (0) returns (0) {
    [PACKED_RESERVE_INFO] sload             // [packedReserveSlot]
    dup1                                    // [packedReserveSlot, packedReserveSlot]
    0xffffffffffffffffffffffffffff and      // [reserve0, packedReserveSlot] 
    dup2 [RESERVE1_OFFSET] shr              // [shifted_packedReserveSlot, reserve0, packedReserveSlot]
    0xffffffffffffffffffffffffffff and      // [reserve1, reserve0, packedReserveSlot] 
    swap2 [BLOCK_TIMESTAMP_LAST_OFFSET] shr // [blocktimestampLast, reserve0, reserve1]
    0x40 mstore returndatasize mstore 0x20 mstore     // []

    0x60 returndatasize return
}

#define macro INITIALIZE() = takes (0) returns (0) {
    NON_PAYABLE()

    [_FACTORY] sload caller eq iszero revert_FORBIDDEN jumpi    // []

    0x04 calldataload [_TOKEN0] sstore                          // []
    0x24 calldataload [_TOKEN1] sstore                          // []
    stop

    revert_FORBIDDEN:
        __ERROR(FORBIDDEN)
        returndatasize mstore 0x04 returndatasize revert
}

#define macro K_LAST() = takes (0) returns (0) {
    [_K_LAST] sload       
    returndatasize mstore
    0x20 returndatasize return
}

#define macro MINT() = takes (0) returns (0) {
    NON_PAYABLE()
    LOCK()

    GET_BALANCE_OF()                              // [token0Balance, token1Balance]
    _GET_RESERVES()                               // [reserve0, reserve1, token0Balance, token1Balance]

    // arrange stack and get amounts sent via safe subtraction
    dup1 dup4 SAFE_SUB()                          // [amount0, reserve0, reserve1, token0Balance, token1Balance]
    dup3 dup6 SAFE_SUB()                          // [amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]

    // mint fee
    dup4 dup4 MINT_FEE()                          // [feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]

    // load totalsupply untop the stack
    [TOTAL_SUPPLY_SLOT] sload                     // [totalSupply, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]

    // If totalsupply is zero use `sqrt(amount0 * amount1)` to mint LP and subtract MINIMUM_LIQUIDITY`
    // else jump to nonZeroTotalSupply jump label
    dup1 iszero iszero nonZeroTotalSupply jumpi   // [totalSupply, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
    [_MINIMUM_LIQUIDITY]                          // [MINIMUM_LIQUIDITY, totalSupply, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
    dup5 dup5 SAFE_MUL()                          // [amountsMul, MINIMUM_LIQUIDITY, totalSupply, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
    SQRT() SAFE_SUB()                             // [liquidity, totalSupply, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]

    // mint minimum liquidity to address(0) and jump to continue jump label
    callvalue [_MINIMUM_LIQUIDITY] _MINT()             // [liquidity, totalSupply, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
    swap1 pop                                     // [liquidity, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
    continue jump                                 // [liquidity, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]

    // If total supply is greater than 0, use `min((amount0 * _totalSupply) / _reserve0, (amount1 * _totalSupply) / _reserve1)` to calculate liquidty to mint to `to` address
    nonZeroTotalSupply:                                     // [totalSupply, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
      dup1 dup4 SAFE_MUL() dup7 swap1 SAFE_DIV()            // [num2, totalSupply, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
      swap1 dup5 SAFE_MUL() dup7 swap1 SAFE_DIV()           // [num1, num2, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
      MIN()                                                 // [liquidity, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]

    // continues execution from above and mints the calculated liqudity to `to` address
    continue:                                                 // [liquidity, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
      dup1 iszero revertInsufficientLiquidityMinted jumpi     // [liquidity, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
      0x04 calldataload dup2 _MINT()                          // [liquidity, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
      finish jump

    revertInsufficientLiquidityMinted:
      __ERROR(INSUFFICIENT_LIQUIDITY_MINTED) callvalue mstore
      0x04 callvalue revert

    // arrange stack and call UPDATE 
    finish:                                           // [liquidity, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
      dup6 dup6 dup10 dup10 UPDATE()                  // [liquidity, feeOn, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]

      // If feeOn returns true (1 and above) update KLAST by setting it to be the product of the updated reserves then jump to emit mint event else only jump to emit mint event
      swap1 iszero emitEvent jumpi
      _GET_RESERVES() SAFE_MUL() [_K_LAST] sstore     // [liquidity, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]

    // emit mint event
    emitEvent:                                        // [liquidity, amount1, amount0, reserve0, reserve1, token0Balance, token1Balance]
      swap2 callvalue mstore 0x20 mstore                   // [liquidity, reserve0, reserve1, token0Balance, token1Balance]
      caller __EVENT_HASH(Mint) 0x40 callvalue log2
      callvalue mstore 

      UNLOCK()
      0x20 callvalue return
}

#define macro PRICE0_CUMULATIVE_LAST() = takes (0) returns (0) {
    [_PRICE0_CUMULATIVE_LAST] sload       
    returndatasize mstore
    0x20 returndatasize return
}

#define macro PRICE1_CUMULATIVE_LAST() = takes (0) returns (0) {
    [_PRICE1_CUMULATIVE_LAST] sload       
    returndatasize mstore
    0x20 returndatasize return
}

#define macro SKIM() = takes (0) returns (0) {
    NON_PAYABLE()
    LOCK()

    [_TOKEN1] sload [_TOKEN0] sload             // [token0, token1]
    GET_BALANCE_OF()                            // [token0Balance, token1Balance, token0, token1]
    _GET_RESERVES()                             // [reserve0, reserve1, token0Balance, token1Balance, token0, token1]

    swap1 swap2 SAFE_SUB()                      // [amount0, reserve1, token1Balance, token0, token1]
    swap2 SAFE_SUB()                            // [amount1, amount0, token0, token1]
    
    swap2 swap1 caller                          // [msg.sender, amount9, token0, amount1, token1]
    SAFE_TRANSFER(callvalue)                         // [amount1, token1]
    caller SAFE_TRANSFER(callvalue)                  // []

    UNLOCK()
    stop
}

#define macro SWAP() = takes (0) returns (0) {
    NON_PAYABLE()
    LOCK()

    // check that at least 1 of amount0Out and amount1Out are a non-zero value, else revert with INSUFFICIENT_OUTPUT_AMOUNT error
    0x04 calldataload dup1 iszero iszero                                // [amont0GT0, amount0]
    0x24 calldataload dup1 iszero iszero                                // [amount1GT0, amount1, amont0GT0, amount0]
    swap1 swap2 or iszero revert_INSUFFICIENT_OUTPUT_AMOUNT jumpi       // [amount1, amount0]

    // store the token reserves on the stack
    _GET_RESERVES()                                                     // [reserve0, reserve1, amount1, amount0]

    // check that both amount0Out and amount1Out are less than reserve0 and reserve1 respectively, else revert with INSUFFICIENT_LIQUIDITY error
    dup4 dup2 gt                                                        // [Reserve0GTamount0, reserve0, reserve1, amount1, amount0]
    dup4 dup4 gt                                                        // [Reserve1GTamount1, Reserve0GTamount0, reserve0, reserve1, amount1, amount0]
    and iszero revert_INSUFFICIENT_LIQUIDITY jumpi                      // [reserve0, reserve1, amount1, amount0]

    // load TOKEN0 address and TOKEN1 address from storage and the `to` address from calldata
    [_TOKEN1] sload                                         // [token1, reserve0, reserve1, amount1, amount0]
    [_TOKEN0] sload                                         // [token0, token1, reserve0, reserve1, amount1, amount0]
    0x44 calldataload                                       // [to, token0, token1, reserve0, reserve1, amount1, amount0]

    // check that `to` address is not equal to TOKEN0 address or TOKEN1 address, else revert with INVALID_TO error
    dup1 dup3 eq revert_INVALID_TO jumpi                    // [to, token0, token1, reserve0, reserve1, amount1, amount0]
    dup1 dup4 eq revert_INVALID_TO jumpi                    // [to, token0, token1, reserve0, reserve1, amount1, amount0]

    // Optimistically transfer amount0Out (if non-zero) to `to` address
    dup7 iszero nextTf jumpi                                // [to, token0, token1, reserve0, reserve1, amount1, amount0]
    dup2 dup8 dup3 SAFE_TRANSFER(callvalue)                 // [to, token0, token1, reserve0, reserve1, amount1, amount0]

    nextTf:                                                 // [to, token0, token1, reserve0, reserve1, amount1, amount0]
      // Optimistically transfer amount1Out(if nonzero) to `to` address
      dup6 iszero afterTf jumpi                             // [to, token0, token1, reserve0, reserve1, amount1, amount0]
      dup3 dup7 dup3 SAFE_TRANSFER(callvalue)               // [to, token0, token1, reserve0, reserve1, amount1, amount0]

    afterTf:
      // check if `data` parameter in calldata has a length greater than 1, if length is 0, jump to afterCallee jump label
      // else prepare memory to execute `IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data)`
      0x64 calldataload 0x04 add calldataload iszero afterCallee jumpi // [to, token0, token1, reserve0, reserve1, amount1, amount0]
      __RIGHTPAD(0x10d1e85c) callvalue mstore                        // [to, token0, token1, reserve0, reserve1, amount1, amount0]
      caller 0x04 mstore                                        // [to, token0, token1, reserve0, reserve1, amount1, amount0]
      dup7 0x24 mstore                                          // [to, token0, token1, reserve0, reserve1, amount1, amount0]
      dup6 0x44 mstore                                          // [to, token0, token1, reserve0, reserve1, amount1, amount0]

      // prepare the stack to execute `IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data)`
      0x64 calldataload 0x04 add calldataload 0x40 add dup1     // [size, retSize, to, token0, token1, reserve0, reserve1, amount1, amount0]
      0x64 dup1                                                 // [destOffset, offset, size, retSize, to, token0, token1, reserve0, reserve1, amount1, amount0]
      calldatacopy                                              // [retSize, to, token0, token1, reserve0, reserve1, amount1, amount0]
      callvalue dup1 swap2 0x64 add callvalue                             // [argOffset, argSize, retOffset, retSize, to, token0, token1, reserve0, reserve1, amount1, amount0]

      // execute `IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data)` if it fails, revert with UNISWAPV2CALL_FAILED error
      dup1 dup6 gas call                                        // [success, to, token0, token1, reserve0, reserve1, amount1, amount0]
      iszero revert_UNISWAPV2CALL_FAILED jumpi                  // [to, token0, token1, reserve0, reserve1, amount1, amount0]

    afterCallee:                                                // [to, token0, token1, reserve0, reserve1, amount1, amount0]
      // get the current balance of the pair contract address for both tokens and store on the stack
      GET_BALANCE_OF()                                          // [balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]
      
      // TIME TO CALCULATE HOW MUCH THE POOL IS TO GET FOR THIS ACT OF BENOVELENCE ABOVE (PLUS FEES 😉)
      /** uint256 amount0In = balance0 > _reserve0 - amount0Out
            ? balance0 - (_reserve0 - amount0Out)
            : 0;
        uint256 amount1In = balance1 > _reserve1 - amount1Out
            ? balance1 - (_reserve1 - amount1Out)
            : 0;
      */
      // if `balance0` is greater than `_reserve0 - amount0Out` then jump to opt0_0 jump label
      // else push 0x00 to the stack as amount0In and jump to check for amount1In at jump label opt1Check
      dup9 dup7 sub dup2 gt opt0_0 jumpi                         // [balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]
      callvalue opt1Check jump                                   // [amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]

    // assign amount0In to the result of `balance0 - (_reserve0 - amount0Out)` 
    opt0_0:                                                     // [balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]
      dup9 dup7 sub dup2 sub                                    // [amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]

    // if `balance1` is greater than `_reserve1 - amount1Out` then jump to opt1_0 jump label
    // else push 0x00 to the stack as amount1In jump to adjustedCheck jump label
    opt1Check:                                                  // [amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]
      dup9 dup9 sub dup4 gt opt1_0 jumpi                        // [amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]
      callvalue adjustedCheck jump                              // [amount1In, amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]

    // assign amount1In to the result of `balance1 - (_reserve1 - amount1Out)` 
    opt1_0:                                                     // [amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]
      dup9 dup9 sub dup4 sub                                    // [amount1In, amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]
    
    adjustedCheck:                                              // [amount1In, amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]

      // before calculating balance0 and balance1 adjusted we confirm that either of amount0In or amount1In is not 0, else we revert with INSUFFICIENT_INPUT_AMOUNT error
      dup1 iszero iszero adjustedJump jumpi                     // [amount1In, amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]
      dup2 iszero revert_INSUFFICIENT_INPUT_AMOUNT jumpi        // [amount1In, amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]

    adjustedJump:
      // we calculate balance0Adjusted with `balance0 * 1000 - amount0In * 3`
      0x03 dup3 SAFE_MUL()                                        // [rightSide, amount1In, amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]
      0x3e8 dup5 SAFE_MUL() SAFE_SUB()                            // [balance0Adjusted, amount1In, amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]

      // we calculate balance0Adjusted with `balance1 * 1000 - amount1In * 3`
      0x03 dup3 SAFE_MUL()                                        // [rightSide, balance0Adjusted, amount1In, amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]
      0x3e8 dup7 SAFE_MUL() SAFE_SUB()                            // [balance1Adjusted, balance0Adjusted, amount1In, amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]

      // check that `balance0Adjusted * balance1Adjusted` is greater than or equal to `reserve0 * reserve1 * 1e6` else revert with `K` error
      dup2 dup2 SAFE_MUL()                                        // [balAdjBasedK, balance1Adjusted, balance0Adjusted, amount1In, amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]
      dup12 dup12 [OneToPower6] 
      SAFE_MUL() SAFE_MUL()                                       // [calK, balAdjBasedK, balance1Adjusted, balance0Adjusted, amount1In, amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]
      lt iszero revert_K jumpi                                    // [balance1Adjusted, balance0Adjusted, amount1In, amount0In, balance0, balance1, to, token0, token1, reserve0, reserve1, amount1, amount0]

      // prepare the stack and call UPDATE()
      pop pop swap7 swap1 swap8                                   // [reserve1, reserve0, balance0, balance1, to, token0, token1, amount1In, amount0In, amount1, amount0]
      swap3 swap1 swap2 UPDATE()                                  // [to, token0, token1, amount1In, amount0In, amount1, amount0]

      // Prepare the stack and memory and emit swap event
      swap4 callvalue mstore                                      // [token0, token1, amount1In, to, amount1, amount0]
      swap2 0x20 mstore                                           // [token1, token0, to, amount1, amount0] 
      swap4 0x40 mstore                                           // [token0, to, amount1, token1] 
      swap2 0x60 mstore                                           // [to, token0, token1] 
      caller __EVENT_HASH(Swap)                                   // [swapEventHash, caller, to, token0, token1]
      0x80 callvalue log3

      UNLOCK()
      stop

    revert_UNISWAPV2CALL_FAILED:
         __ERROR(UNISWAPV2CALL_FAILED)
        callvalue mstore 0x04 callvalue revert

    revert_INSUFFICIENT_OUTPUT_AMOUNT:
        __ERROR(INSUFFICIENT_OUTPUT_AMOUNT)
        callvalue mstore 0x04 callvalue revert

        
    revert_INSUFFICIENT_LIQUIDITY:
        __ERROR(INSUFFICIENT_LIQUIDITY)
        callvalue mstore 0x04 callvalue revert

    revert_INVALID_TO:
        __ERROR(INVALID_TO)
        callvalue mstore 0x04 callvalue revert

    revert_INSUFFICIENT_INPUT_AMOUNT:
        __ERROR(INSUFFICIENT_INPUT_AMOUNT)
        callvalue mstore 0x04 callvalue revert

    revert_K:
        __ERROR(INVALID_K)
        callvalue mstore 0x04 callvalue revert
}

#define macro SYNC() = takes (0) returns (0) {
    NON_PAYABLE()
    LOCK()

    _GET_RESERVES()                             // [reserve0, reserve1]
    GET_BALANCE_OF()                            // [token0Balance, token1Balance, reserve0, reserve1]
    UPDATE()                                    // []

    UNLOCK()
    stop
}

#define macro TOKEN0() = takes (0) returns (0) {
    [_TOKEN0] sload       
    returndatasize mstore
    0x20 returndatasize return
}

#define macro TOKEN1() = takes (0) returns (0) {
    [_TOKEN1] sload       
    returndatasize mstore
    0x20 returndatasize return
}




// HELPERS, INTERNAL AND PRIVATE FUNCTIONS

#define macro _GET_RESERVES() = takes(0) returns(2) {
    [PACKED_RESERVE_INFO] sload             // [packedReserveSlot]
    dup1                                    // [packedReserveSlot, packedReserveSlot]
    [RESERVE1_OFFSET] shr                   // [shifted_packedReserveSlot, packedReserveSlot]
    0xffffffffffffffffffffffffffff and      // [reserve1, packedReserveSlot] 
    swap1                                   // [packedReserveSlot, reserve1] 
    0xffffffffffffffffffffffffffff and      // [reserve0, reserve1]
}

#define macro GET_BALANCE_OF() = takes(0) returns(2) {
    // returns balance of token0 and token1
    // safe to assume they both have code deployed to them as adding liquidity for them in this pair wouldn't have been possible otherwise

    __RIGHTPAD(0x70a08231) callvalue mstore      
    address 0x04 mstore                                                                 
    0x20 0x80 0x24 callvalue                                         // [in, insize, out, outsize]
    [_TOKEN1] sload gas staticcall          
    iszero balanceOfCallFailed jumpi
    0x80 mload                                                  // [token1Balance]
    
    0x20 0x80 0x24 callvalue                                         // [in, insize, out, outsize, token1Balance]
    [_TOKEN0] sload gas staticcall
    iszero balanceOfCallFailed jumpi
    0x80 mload                                                  // [token0Balance, token1Balance]
    GET_BALANCE_OF_continue jump

    balanceOfCallFailed:
        callvalue callvalue revert

    GET_BALANCE_OF_continue:
}


#define macro MINT_FEE() = takes(0) returns(1) {
  // expects 2 stack inputs [reserev0, reserve1]

    __RIGHTPAD(0x017e7e58) callvalue mstore                              // [reserev0, reserve1]

    0x20 0x80 0x04 callvalue                                             // [in, insize, out, outsize, reserev0, reserve1]
    [_FACTORY] sload gas staticcall                                 // [sucess, reserev0, reserve1]
    iszero feeToCallFailed jumpi                                    // [reserev0, reserve1]
    0x80 mload                                                      // [feeTo, reserev0, reserve1]
    dup1 iszero iszero                                              // [feeOn, feeTo, reserev0, reserve1]


    dup1 iszero iszero feeOnCondition jumpi                         // [feeOn, feeTo, reserev0, reserve1]

    [_K_LAST] sload                                                 // [kLast, feeOn, feeTo, reserev0, reserve1]
    iszero preContinue_kLastIsZero jumpi                            // [feeOn, feeTo, reserev0, reserve1]

    callvalue [_K_LAST] sstore                                           // [feeOn, feeTo, reserev0, reserve1]
    preContinue_kLastIsZero jump                                    // [feeOn]


    feeOnCondition:
        [_K_LAST] sload dup1                                        // [kLast, kLast, feeOn, feeTo, reserev0, reserve1]
        iszero preContinue_kLastIsZero jumpi
                                                                    // [kLast, feeOn, feeTo, reserev0, reserve1]
        swap3 swap1 swap4 SAFE_MUL() SQRT()                         // [rootK, kLast, feeOn, feeTo] [rootK, feeTo, kLast, feeOn]
        swap2 SQRT()                                                // [rootKLast, feeTo, rootK, feeOn]
        swap2 swap1                                                 // [feeTo, rootK, rootKLadst, FEEoN]
        swap3 swap2                                                 // [rootKLast, rootK, feeOn, feeTo]

        dup1 dup3 gt iszero iszero preContinue_rootKCompare jumpi                  

        dup1 dup3 sub [TOTAL_SUPPLY_SLOT] sload SAFE_MUL()          // [numerator, rootKLast, rootK, feeOn, feeTo]   
        swap2 0x05 SAFE_MUL() SAFE_ADD()                            // [denominator, numerator, feeOn, feeTo]
        swap1 SAFE_DIV() dup1                                       // [liquidity, liquidity, feeOn, feeTo]
        
        iszero preContinue_kLastCompare jump

        swap2 swap1 _MINT()                                         // [feeOn]
        MINT_FEE_continue jump


    feeToCallFailed:
        callvalue callvalue revert

    preContinue_kLastIsZero:
        swap3 pop pop pop
        MINT_FEE_continue jump

    preContinue_rootKCompare:
        pop pop swap1 pop 
        MINT_FEE_continue jump

    preContinue_last:
        pop swap1 pop 
        MINT_FEE_continue jump

    preContinue_kLastCompare:
        pop

    MINT_FEE_continue:
}



#define macro UPDATE() = takes(0) returns(0) {
    // stack requirement [balance0, balance1, reserve0, reserve1]

    [__UINT112_MAX] dup2 gt overflow jumpi
    [__UINT112_MAX] dup3 gt overflow jumpi

    0x100000000 timestamp SAFE_MOD()                       // [blockTimestamp, balance0, balance1, reserve0, reserve1]
    [PACKED_RESERVE_INFO] sload                     // [packedReserveInfo, blockTimestamp, balance0, balance1, reserve0, reserve1]
    [BLOCK_TIMESTAMP_LAST_OFFSET] shr               // [blocktimestamplast, blocktimestamp, balance0, balance1, reserve0, reserve1]
    dup2 sub                                        // [timeElapsed, blocktimestamp, balance0, balance1, reserve0, reserve1]


    dup1 iszero requireJump jumpi                   // [timeElapsed, blocktimestamp, balance0, balance1, reserve0, reserve1]
    dup5 iszero requireJump jumpi                   // [timeElapsed, blocktimestamp, balance0, balance1, reserve0, reserve1]
    dup6 iszero requireJump jumpi                   // [timeElapsed, blocktimestamp, balance0, balance1, reserve0, reserve1]

    [_PRICE0_CUMULATIVE_LAST] sload                 // [price0Cumulativelast, timeElapsed, blocktimestamp, balance0, balance1, reserve0, reserve1]
    dup2 dup7 dup9 ENCODE()                         // [ENCODED-reserve1, reserve0, timeElapsed, price0Cumulativelast, timeElapsed, blocktimestamp, balance0, balance1, reserve0, reserve1]
    UQDIV() mul                                     // [extraPrice0CumulativeLast, price0Cumulativelast, timeElapsed, blocktimestamp, balance0, balance1, reserve0, reserve1]
    add [_PRICE0_CUMULATIVE_LAST] sstore            // [timeElapsed, blocktimestamp, balance0, balance1, reserve0, reserve1]
      
    [_PRICE1_CUMULATIVE_LAST] sload                 // [price1Cumulativelast, timeElapsed, blocktimestamp, balance0, balance1, reserve0, reserve1]
    dup7 dup7 ENCODE()                              // [ENCODED-reserve0, reserve1, price1Cumulativelast, timeElapsed, blocktimestamp, balance0, balance1, reserve0, reserve1]
    UQDIV() swap1 swap2 mul                         // [extraPrice1CumulativeLast, price1Cumulativelast, blocktimestamp, balance0, balance1, reserve0, reserve1]
    add [_PRICE1_CUMULATIVE_LAST] sstore            // [blocktimestamp, balance0, balance1, reserve0, reserve1]
    updateStorage jump                              // [blocktimestamp, balance0, balance1, reserve0, reserve1]

    requireJump:
      pop

    updateStorage:                                      // [blocktimestamp, balance0, balance1, reserve0, reserve1]
      pop swap1 [RESERVE1_OFFSET] shl or                // [balances, reserve0, reserve1]
      timestamp [BLOCK_TIMESTAMP_LAST_OFFSET] shl       // [shiftedTimeStamp, balances, reserve0, reserve1
      or [PACKED_RESERVE_INFO] sstore                   // [reserve0, reserve1]
      UPDATE_continue jump
      
    overflow:
      __ERROR(OVERFLOW) callvalue mstore
      0x04 callvalue revert

    UPDATE_continue:
      pop pop                                           // []
}



// Function Dispatching
#define macro MAIN() = takes(1) returns(1) {
    // Identify which function is being called.
    // [func sig]
    returndatasize calldataload 0xE0 shr

    
    // pivot0 cut on function kLast() view returns (uint256) 0x7464fc3d
    __FUNC_SIG(kLast) dup2 lt iszero pivot0 jumpi
            
        // pivot00 cut on function initialize(address,address) 0x485cc955
        __FUNC_SIG(initialize) dup2 lt iszero pivot00 jumpi
              // function swap(uint256,uint256,address,bytes)
              dup1 __FUNC_SIG(swap)  eq swapJump   jumpi
        
              // function getReserves() view returns (uint112, uint112, uint32)
              dup1 __FUNC_SIG(getReserves)  eq getReservesJump   jumpi
        
              // function token0() view returns (address)
              dup1 __FUNC_SIG(token0)  eq token0Jump   jumpi
        
        
              not_found jump
        
        pivot00:
              // function initialize(address,address)
              dup1 __FUNC_SIG(initialize)  eq initializeJump   jumpi
        
              // function price0CumulativeLast() view returns (uint256)
              dup1 __FUNC_SIG(price0CumulativeLast)  eq price0CumulativeLastJump   jumpi
        
              // function price1CumulativeLast() view returns (uint256)
              dup1 __FUNC_SIG(price1CumulativeLast)  eq price1CumulativeLastJump   jumpi
        
              // function mint(address) returns (uint256)
              dup1 __FUNC_SIG(mint)  eq mintJump   jumpi
        
        
              not_found jump
        
        
    
    pivot0:
            
        // pivot01 cut on function skim(address) 0xbc25cf77
        __FUNC_SIG(skim) dup2 lt iszero pivot01 jumpi
              // function kLast() view returns (uint256)
              dup1 __FUNC_SIG(kLast)  eq kLastJump   jumpi
        
              // function burn(address) returns (uint256, uint256)
              dup1 __FUNC_SIG(burn)  eq burnJump   jumpi
        
              // function MINIMUM_LIQUIDITY() pure returns (uint256)
              dup1 __FUNC_SIG(MINIMUM_LIQUIDITY)  eq MINIMUM_LIQUIDITYJump   jumpi
        
        
              not_found jump
        
        pivot01:
              // function skim(address)
              dup1 __FUNC_SIG(skim)  eq skimJump   jumpi
        
              // function factory() view returns (address)
              dup1 __FUNC_SIG(factory)  eq factoryJump   jumpi
        
              // function token1() view returns (address)
              dup1 __FUNC_SIG(token1)  eq token1Jump   jumpi
        
              // function sync()
              dup1 __FUNC_SIG(sync)  eq syncJump   jumpi
        
        
              not_found jump
        
        

    not_found:
      ERC20_MAIN()            // [sig]
      // Revert if no match is found.
      0x00 dup1 revert

    

    // function swap(uint256,uint256,address,bytes) 
    swapJump:
      SWAP()

    // function getReserves() view returns (uint112, uint112, uint32) 
    getReservesJump:
      GET_RESERVES()

    // function token0() view returns (address) 
    token0Jump:
      TOKEN0()

    // function initialize(address,address) 
    initializeJump:
      INITIALIZE()

    // function price0CumulativeLast() view returns (uint256) 
    price0CumulativeLastJump:
      PRICE0_CUMULATIVE_LAST()

    // function price1CumulativeLast() view returns (uint256) 
    price1CumulativeLastJump:
      PRICE1_CUMULATIVE_LAST()

    // function mint(address) returns (uint256) 
    mintJump:
      MINT()

    // function kLast() view returns (uint256) 
    kLastJump:
      K_LAST()

    // function burn(address) returns (uint256, uint256) 
    burnJump:
      BURN()

    // function MINIMUM_LIQUIDITY() pure returns (uint256) 
    MINIMUM_LIQUIDITYJump:
      MINIMUM_LIQUIDITY()

    // function skim(address) 
    skimJump:
      SKIM()

    // function factory() view returns (address) 
    factoryJump:
      FACTORY()

    // function token1() view returns (address) 
    token1Jump:
      TOKEN1()

    // function sync() 
    syncJump:
      SYNC()
}


#define macro CONSTRUCTOR() = takes(0) returns(0) {
    caller [_FACTORY] sstore

    ERC20_CONSTRUCTOR()
}
